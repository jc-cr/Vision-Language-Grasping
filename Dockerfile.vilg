# Base image
FROM nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04 AS base

ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"
ENV SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True
ENV CUDA_HOME="/usr/local/cuda"
ENV TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0 7.5 8.0 8.6+PTX"
ENV FORCE_CUDA=1

RUN apt-get update && apt-get install -y \
    python3.8 \
    python3-pip \
    python3.8-dev \
    git \
    wget \
    build-essential \
    libgl1-mesa-glx \
    libglib2.0-0 \
    x11-apps \
    cmake \
    libffi-dev \
    gcc \
    libjpeg-dev \
    zlib1g-dev \
    libpng-dev \
    libtiff5-dev \
    libfreetype6-dev \
    libwebp-dev \
    ninja-build \
    gfortran \
    libopenblas-dev \
    liblapack-dev \
    && rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1

RUN pip3 install --upgrade pip

# Builder stage for Python packages
FROM base AS builder

WORKDIR /app

# Copy only the requirements file first to leverage Docker cache
COPY consolidated_requirements.txt .

# Install setuptools explicitly first
RUN pip3 install setuptools==66.0.0


# Install pre-compiled requirements
RUN pip3 install --no-cache-dir -r consolidated_requirements.txt

RUN pip install pybullet==3.2.5

# Final stage
FROM base AS final

# Copy the installed packages from the builder stage
COPY --from=builder /usr/local /usr/local

# Copy the entire project
COPY . /app

WORKDIR /app

# Set up CUDA environment variables
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

# Install additional CUDA libraries
RUN apt-get update && apt-get install -y \
    cuda-cudart-dev-11-1 \
    cuda-libraries-dev-11-1 \
    cuda-nvcc-11-1 \
    cuda-nvml-dev-11-1 \
    cuda-command-line-tools-11-1 \
    cuda-nvprof-11-1 \
    && rm -rf /var/lib/apt/lists/*

# Set permissions for the entire app directory
RUN chmod -R 777 /app

# Build and install pointnet2 extension with verbose output
RUN cd /app/models/graspnet/pointnet2 && python setup.py install --verbose 

RUN ls /app/models/graspnet/pointnet2
RUN ls /app/models/graspnet/pointnet2/_ext_src

# Build and install knn extension
RUN cd /app/models/graspnet/knn && python setup.py install --verbose

WORKDIR /app