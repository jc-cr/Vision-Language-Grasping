# Base image
FROM nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04 AS base

ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"
ENV SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True
ENV CUDA_HOME="/usr/local/cuda"
ENV TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0 7.5 8.0 8.6+PTX"
ENV FORCE_CUDA=1

RUN apt-get update && apt-get install -y \
    python3.8 \
    python3-pip \
    python3.8-dev \
    git \
    wget \
    build-essential \
    libgl1-mesa-glx \
    libglib2.0-0 \
    x11-apps \
    cmake \
    libffi-dev \
    gcc \
    libjpeg-dev \
    zlib1g-dev \
    libpng-dev \
    libtiff5-dev \
    libfreetype6-dev \
    libwebp-dev \
    ninja-build \
    gfortran \
    libopenblas-dev \
    liblapack-dev \
    && rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1

RUN pip3 install --upgrade pip

# Builder stage for Python packages
FROM base AS builder

WORKDIR /app

# Copy only the requirements file first to leverage Docker cache
COPY consolidated_requirements.txt .


# Install pre-compiled requirements
RUN pip3 install --no-cache-dir -r consolidated_requirements.txt

# Final stage
FROM base AS final

# Copy the installed packages from the builder stage
COPY --from=builder /usr/local /usr/local

# Copy the entire project
COPY . /app

WORKDIR /app

# Set up CUDA environment variables
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib/python3.8/dist-packages/torch/lib"

RUN apt-get update && apt-get install -y \
    cuda-cudart-11-1 \
    cuda-libraries-11-1 \
    && rm -rf /var/lib/apt/lists/*

RUN python -c "import torch; print(torch.__version__)" > /tmp/torch_version.log 2>&1
RUN python -c "import torch; print(torch.cuda.is_available())" > /tmp/torch_cuda.log 2>&1

RUN chmod -R 777 /app

RUN cd /app/models/graspnet/pointnet2 && python setup.py install --verbose > /tmp/pointnet2_install.log 2>&1

RUN ls -l /app/models/graspnet/pointnet2/build > /tmp/pointnet2_build.log 2>&1
RUN ls -l /app/models/graspnet/pointnet2/build/lib* > /tmp/pointnet2_lib.log 2>&1 || echo "No lib directory found" > /tmp/pointnet2_lib.log

RUN ldconfig -p > /tmp/ldconfig.log 2>&1
RUN find / -name "libc10.so" > /tmp/find_libc10.log 2>&1

RUN python -c "import sys; import pointnet2._ext as _ext; print(_ext); print(sys.path); print(sys.modules.keys())" > /tmp/pointnet2_import.log 2>&1 || (echo "Import failed. Error trace:" && python -c "import traceback; import pointnet2._ext as _ext" 2>&1 | tee /tmp/pointnet2_error.log)

# Combine all logs into one file for easier access
RUN cat /tmp/*.log > /tmp/debug_output.log

# Copy the debug output to a volume that persists after build
RUN mkdir -p /debug_output
RUN cp /tmp/debug_output.log /debug_output/

# Declare the volume after copying the file
VOLUME /debug_output

# Build and install knn extension
RUN cd /app/models/graspnet/knn && python setup.py install --verbose

WORKDIR /app